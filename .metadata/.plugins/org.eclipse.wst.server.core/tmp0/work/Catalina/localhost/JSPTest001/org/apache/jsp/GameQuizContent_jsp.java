/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M9
 * Generated at: 2019-12-18 06:26:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.ac.inhatc.*;

public final class GameQuizContent_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("kr.ac.inhatc");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled and minified CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery library -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Popper JS -->\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled JavaScript -->\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 데이터 초기화 및 불러오기 -->\r\n");

	//문제 객체 선언
	GameQuiz quiz = new GameQuiz();

	//이용자 정보 변수 받아오기 및 초기화

	//이용자 정보 변수 받아오기 및 초기화
	String id = (String)session.getAttribute("__id");
	if(id==null){
		response.sendRedirect("index.jsp");
	}
	
	
	
	//문제 번호 불러오기
	String qNo = request.getParameter("_qno");
	int quizNo;
	if(qNo==null){
		quizNo = 0;
	}else{
		quizNo = Integer.parseInt(qNo);
	}
	

	
	//이전 문제 정답 불러오기
	String ans = request.getParameter("_ans");
	int pAns;
	if(ans==null){
		pAns = 1;
	}else{
		pAns = Integer.parseInt(ans);
	}
	
	//이전 문제 유저 정답 불러오기
	String uAns = request.getParameter("_uAns");
	int userAns;
	if(uAns==null){
		userAns = -1;
	}else{
		userAns = Integer.parseInt(uAns);
	}
		
	//누적 점수 불러오기
	String point = request.getParameter("_point");
	int userPoint;
	if(point==null){
		userPoint = 0;
	}else{
		userPoint = Integer.parseInt(point);
	}
	
	//첫 문제가 아닐 경우 정답 확인 및 점수 누적
	
		if(userAns==pAns){
			userPoint += 50;
		}
	
		//3문제 풀었을 경우 결과로 이동
		if(quizNo>2){
			response.sendRedirect("PointChangeSave.jsp?_point=" + userPoint + "&_type=quizg");
		}
	


      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"card bg-light text-dark\">\r\n");
      out.write("  <div class=\"card-header\" align=\"center\">");
      out.print(quiz.Question[quizNo] );
      out.write("</div>\r\n");
      out.write("  <div class=\"card-body\" align=\"center\"><div class=\"btn-group-vertical\"> \r\n");



	out.print("<a href='GameQuizContent.jsp?_qno=" + (quizNo+1) + "&_point=" + userPoint + "&_ans=" + quiz.answerNo[quizNo] + "&_uAns=1' class='btn btn-success' role='button'>" + quiz.QText[quizNo][0] + "</a>");
	out.print("<a href='GameQuizContent.jsp?_qno=" + (quizNo+1) + "&_point=" + userPoint + "&_ans=" + quiz.answerNo[quizNo] + "&_uAns=2' class='btn btn-info' role='button'>" + quiz.QText[quizNo][1] + "</a>");
	out.print("<a href='GameQuizContent.jsp?_qno=" + (quizNo+1) + "&_point=" + userPoint + "&_ans=" + quiz.answerNo[quizNo] + "&_uAns=3' class='btn btn-warning' role='button'>" + quiz.QText[quizNo][2] + "</a>");
	out.print("<a href='GameQuizContent.jsp?_qno=" + (quizNo+1) + "&_point=" + userPoint + "&_ans=" + quiz.answerNo[quizNo] + "&_uAns=4' class='btn btn-danger' role='button'>" + quiz.QText[quizNo][3] + "</a>");



      out.write(" \r\n");
      out.write("</div></div>\r\n");
      out.write("  <div class=\"card-footer\" align=\"center\">\r\n");
      out.write("  \r\n");
      out.write("  <a href=\"GameQuizContent.jsp?_qno=");
      out.print(quizNo+1 );
      out.write("&_point=");
      out.print(userPoint );
      out.write("&_ans=");
      out.print(quiz.answerNo[quizNo]);
      out.write("&_uAns=0\" class=\"btn btn-success\" role=\"button\">Pass</a>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
