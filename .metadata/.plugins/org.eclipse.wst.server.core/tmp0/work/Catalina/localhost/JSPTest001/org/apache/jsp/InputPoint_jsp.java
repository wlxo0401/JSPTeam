/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M9
 * Generated at: 2019-12-18 05:43:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.ac.inhatc.DBConnect;
import java.sql.*;

public final class InputPoint_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {




  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("kr.ac.inhatc.DBConnect");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=Euc-kr");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"Euc-kr\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- Latest compiled and minified CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery library -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Popper JS -->\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled JavaScript -->\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("body {background-color:black}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 데이터 불러오기 -->\r\n");

	//이용자 정보 변수 받아오기 및 초기화
	String id = (String)session.getAttribute("__id");
	if(id==null){
		id = "ID101";
	}
String name = "";
String point = "";
int userPoint = 0;

//데이터베이스 연동 이용자 이름 및 포인트 불러오기
Class.forName("oracle.jdbc.driver.OracleDriver");//1.DB드라이버잡기
	System.out.println("JoinCheck 드라이버잡기");
	Connection conn = DriverManager.getConnection(
			"jdbc:oracle:thin:@127.0.0.1:1521:xe", "jsptest", "1234");//2.커넥션객체생성해서 커넥트
	Statement stmt = conn.createStatement();//3.커넥트 객체로 stmt 객체를 만든다
	ResultSet rs=stmt.executeQuery("SELECT * FROM userInfo WHERE id='" + id + "'");
while(rs.next()){
	name = rs.getString("name");
}

	rs=stmt.executeQuery("SELECT * FROM userInfo WHERE id='"+id+"'");
while(rs.next()){
	point = rs.getString("point");
}
if(!point.equals("")){
	userPoint = Integer.parseInt(point);
}
rs.close();
stmt.close();
conn.close();



      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 변경 데이터 저장 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 회원 정보 수정 본문 -->\r\n");
      out.write("<center>  <div class=\"card bg-dark text-white\">\r\n");
      out.write("    <div class=\"card-body\">\r\n");
      out.write("<h4 class=\"mb-3\">포인트 충전/환전</h4>\r\n");
      out.write("<h6 class=\"mb-3\">보유 포인트 : ");
      out.print(userPoint );
      out.write("</h6>\r\n");
      out.write("<form action=\"PointChangeSave.jsp\" class=\"needs-validation\" method=\"post\" novalidate>\r\n");
      out.write("  <div class=\"form-group\">\r\n");
      out.write("    <label for=\"uname\">포인트 충전</label>\r\n");
      out.write("    <input type=\"text\" class=\"form-control\" id=\"uname\" placeholder=\"충전할 포인트를 적어주세요\" name=\"_point\" value=\"0\" required>\r\n");
      out.write("    <div class=\"valid-feedback\">확인</div>\r\n");
      out.write("    <div class=\"invalid-feedback\">충전할 포인트를 적어주세요</div>\r\n");
      out.write("  </div>\r\n");
      out.write("  <div class=\"form-group\">\r\n");
      out.write("  <div class=\"form-group form-check\">\r\n");
      out.write("    <label class=\"form-check-label\">\r\n");
      out.write("      <input class=\"form-check-input\" type=\"checkbox\" name=\"remember\" required> 포인트 변경 관련 약정에 동의합니다.\r\n");
      out.write("      <div class=\"valid-feedback\">확인</div>\r\n");
      out.write("      <div class=\"invalid-feedback\">필수 동의항목에 동의해 주세요</div>\r\n");
      out.write("    </label>\r\n");
      out.write("  </div>\r\n");
      out.write("  <input type=\"hidden\" name=\"_type\" value=\"plus\">\r\n");
      out.write("  <button type=\"submit\" class=\"btn btn-primary\">포인트 충전</button>\r\n");
      out.write("  </div>\r\n");
      out.write("</form>\r\n");
      out.write("<form action=\"PointChangeSave.jsp\" class=\"needs-validation\" method=\"post\" novalidate>\r\n");
      out.write("  <div class=\"form-group\">\r\n");
      out.write("     <label for=\"zip\">포인트 환전</label>\r\n");
      out.write("     <input class=\"form-control\" id=\"phoneNumber\" required=\"\" type=\"text\" value=\"0\" name=\"_point\">\r\n");
      out.write("     <div class=\"valid-feedback\">확인</div>\r\n");
      out.write("     <div class=\"invalid-feedback\">환전할 포인트를 적어주세요</div>\r\n");
      out.write("  </div>\r\n");
      out.write("  <div class=\"form-group\">\r\n");
      out.write("  </div>\r\n");
      out.write("  <div class=\"form-group form-check\">\r\n");
      out.write("    <label class=\"form-check-label\">\r\n");
      out.write("      <input class=\"form-check-input\" type=\"checkbox\" name=\"remember\" required> 포인트 변경 관련 약정에 동의합니다.\r\n");
      out.write("      <div class=\"valid-feedback\">확인</div>\r\n");
      out.write("      <div class=\"invalid-feedback\">필수 동의항목에 동의해 주세요</div>\r\n");
      out.write("    </label>\r\n");
      out.write("  </div>\r\n");
      out.write("  <input type=\"hidden\" name=\"_type\" value=\"minus\">\r\n");
      out.write("  <button type=\"submit\" class=\"btn btn-primary\">포인트 환전</button>\r\n");
      out.write("</form></div>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("// Disable form submissions if there are invalid fields\r\n");
      out.write("(function() {\r\n");
      out.write("  'use strict';\r\n");
      out.write("  window.addEventListener('load', function() {\r\n");
      out.write("    // Get the forms we want to add validation styles to\r\n");
      out.write("    var forms = document.getElementsByClassName('needs-validation');\r\n");
      out.write("    // Loop over them and prevent submission\r\n");
      out.write("    var validation = Array.prototype.filter.call(forms, function(form) {\r\n");
      out.write("      form.addEventListener('submit', function(event) {\r\n");
      out.write("        if (form.checkValidity() === false) {\r\n");
      out.write("          event.preventDefault();\r\n");
      out.write("          event.stopPropagation();\r\n");
      out.write("        }\r\n");
      out.write("        form.classList.add('was-validated');\r\n");
      out.write("      }, false);\r\n");
      out.write("    });\r\n");
      out.write("  }, false);\r\n");
      out.write("})();\r\n");
      out.write("</script>\r\n");
      out.write("</center>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
