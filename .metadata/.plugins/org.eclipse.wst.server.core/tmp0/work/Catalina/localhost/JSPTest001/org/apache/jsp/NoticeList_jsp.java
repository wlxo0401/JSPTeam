/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M9
 * Generated at: 2019-12-18 04:31:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.ac.inhatc.DBConnect;
import java.sql.*;

public final class NoticeList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("kr.ac.inhatc.DBConnect");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- Latest compiled and minified CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery library -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Popper JS -->\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled JavaScript -->\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

//이용자 정보 변수 받아오기 및 초기화
String id = (String)session.getAttribute("__id");
if(id==null){
	response.sendRedirect("index.jsp");
}

//이용자 초기화 변수 선언
int textNo;
String name="";
String date="";

//게시글 개수 변수
int pNum = 10;
int sNum = 10;
int [][] tno = new int[pNum][sNum];
String[][] title = new String[pNum][sNum];
String[][] tname = new String[pNum][sNum];
String[][] tdate = new String[pNum][sNum];
String[][] tcontent = new String[pNum][sNum];
int textNum = 1;
int lastNum = 0;
int pCount = 0;
int sCount = 0;

//페이지 정보 받아오기 및 초기화
String tempPage = request.getParameter("_pageNum");
int pageNum = 1;
if(tempPage!=null){
	pageNum = Integer.parseInt(tempPage);
}

//DB연동 및 데이터 불러오기
Class.forName("oracle.jdbc.driver.OracleDriver");//1.DB드라이버잡기
	System.out.println("JoinCheck 드라이버잡기");
	Connection conn = DriverManager.getConnection(
			"jdbc:oracle:thin:@127.0.0.1:1521:xe", "jsptest", "1234");//2.커넥션객체생성해서 커넥트
	Statement stmt = conn.createStatement();//3.커넥트 객체로 stmt 객체를 만든다
	//글의 개수 불러오고 내용을 배열변수에 등록
	ResultSet rs = stmt.executeQuery("SELECT MAX(no) FROM textList");
	while(rs.next()){
		lastNum = rs.getInt(1);
	}
	stmt.executeQuery("SELECT COUNT(no) FROM textList");
	while(rs.next()){
		textNum = rs.getInt(1);
	}
	
	//글번호 초기화
	for(int i = 0 ; i < 10 ; i++){
		for(int j = 0 ; j < 10 ; j++){
			tno[i][j] = 0;
		}
	}
	
	//글 정보 불러오기
	rs = stmt.executeQuery("SELECT * FROM textList ORDER BY no DESC");

	//제어용 변수 선언
	int i = 0;
	int j = 0;
	while(rs.next()){
		tno[i][j] = rs.getInt("no");
		tname[i][j] = rs.getString("userid");
		title[i][j] = rs.getString("title");
		tcontent[i][j] = rs.getString("content");
		tdate[i][j] = (rs.getString("data")).substring(0, 10);
		j++;
		if(j>=10){
			j = 0;
			i++;
		}
	}
rs.close();
stmt.close();
conn.close();



      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("  <center><h2>공지사항</h2></center>\r\n");
      out.write("  <br/>\r\n");
      out.write("  <table class=\"table\">\r\n");
      out.write("    <thead align=\"center\">\r\n");
      out.write("      <tr>\r\n");
      out.write("      \t<th align=\"center\">글 번호</th>\r\n");
      out.write("      \t<th>제목</th>\r\n");
      out.write("        <th>작성자 아이디</th>\r\n");
      out.write("        <th>작성 날짜</th>                \r\n");
      out.write("      </tr>\r\n");
      out.write("    </thead>\r\n");
      out.write("    <tbody align=\"center\">\r\n");
      out.write("    ");

    for(i = 0 ; i < 10 ; i++){
    	if(title[pageNum-1][i]!=null){
    		out.print("<tr>");
    		out.print("<td>" + tno[pageNum-1][i] + "</td>");
    		out.print("<td><a href='ReadText.jsp?_tno=" + tno[pageNum-1][i] + "'>" + title[pageNum-1][i] + "</a></td>");
    		out.print("<td>" + tname[pageNum-1][i] + "</td>");
    		out.print("<td>" + tdate[pageNum-1][i] + "</td>");
    		out.print("</tr>");
    	}
    }
    
      out.write("                                \r\n");
      out.write("    </tbody>\r\n");
      out.write("  </table>\r\n");
      out.write("  <center><form action=WriteText.jsp method=post>\r\n");
      out.write("  ");

  String tt;  
  if((id.toLowerCase()).equals("admin")){
	  out.print("<button type='submit' class='btn btn-dark'>글 쓰기</button>");
  }  
  
      out.write("  \r\n");
      out.write("  </form></center>\r\n");
      out.write("  <!-- 페이지 번호 -->\r\n");
      out.write("  <center>\r\n");
      out.write("  ");

  for(i = 0 ; i < 10 ; i++){
	  if(title[i][0]!=null){
		  out.print("<a href='NoticeList.jsp?_pageNum=" + (i+1) + "'>" + (i+1) + "</a>");
	  }
  }
  
      out.write("\r\n");
      out.write("  </center>  \r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
